TODO:
    - arg parsing 
        - using argc and argv
    - prompt loop
        - simple while loop
    - stdin i/o
        - how do c programs handle input output streams
        - how does the terminal process facilitate this? (it must right)
    - filesys persistence  
        - what syscalls do c programs use to write to disk (file descriptors?)
        - where should program data be stored?
            - linux: .config
            - macOS, Windows: TBD
        - (de)serialize struct data structure on reads and writes (today and tomorrow)
            - cJson 
        - Something like:
            typedef struct {
                char *name;
                uint16_t wakeup;
                char * today[100];
                char *[] tomorrow;
                uint32_t last_update
            } ProgramData;
    - system time (clock)

modulo set
----------
modulo set username
Successfully updated username!
Previous username: phyde, New username: 

modulo set wakeup 8:15
Successfully updated wakeup time!
Previous wakeup: 09:00 AM, New wakeup: 08:15 AM

modulo set entry_delimiter jj
Successfully updated entry delimiter!
Previous deilimiter: %, New delimiter: jj

modulo set preferences (sets username and wakeup)
This utility helps you update your user preferences.
type `done` at any time to abort

The following preferences are set:
    1. username: early_riser
    2. wakeup: 07:00 AM
    3. entry_delimiter: %

Enter a number to set a preference: 1

Current username: early_riser
Enter a new username (or submit an empty string to select a different preference).

new username: night_owl

Successfully updated username to night_owl!

The following preferences are set:
    1. username: night_owl
    2. wakeup: 07:00 AM
    3. entry_delimiter: %

Enter a number to set a preference: 2

Current wakeup: 10am
Enter a new wakeup time (or submit an empty string to select a different preference).

new wakeup: 10am

Successfully updated wakeup to 09:00 AM!

Errors:
username [
    Oops, the username "night_owlllllll..." is too long! Usernames must be 31 characters or less. 
]

wakeup [
    Error parsing wakeup time: 730am
    Your input must match one of the following formats:
    AM/PM:
        1. %H(am|pm)
        2. %H:%M(am|pm)
    24-Hour:
        3. %H
        4. %H:%M
    
    Note that white space and leading zeros are optional. Also matching is case insensitive.
    i.e. "9am", "009:00 AM", "9:00am", and "9 : 00" are all valid.
]

entry_delimiter [
    Oops, entry_delimiter is too long. The delimiter must be 15 characters or less
]


modulo get
----------
modulo get username
current username: night_owl

modulo get wakeup
Current wakeup: 10am

modulo get entry_delimiter
Current entry_delimiter: %

modulo get preferences (gets username and wakeup)
The following preferences are set:
    1. username: night_owl
    2. wakeup: 07:00 AM
    3. entry_delimiter: %

update preferences with `modulo set preferences`

Journaling
----------

modulo today
You have 3 entries to review today

1. 
Lorem ipsem dolor ivet lendonor pervat at te sentin fan batcha lin gemlin
olor ivet lendonor pervat at te sentin fan batcha lin gemlin
Lorem ipsem dolor ivet lendonor pervat at te sentin fan batcha lin gemlin

2. 
sdfgdsfg

3. 
olor ivet lendonor pervat at te sentin fan batcha lin gemlin
Lorem ipsem dolor ivet lendonor pervat at te sentin fan batcha lin gemlin
sdfgdsfg


modulo tomorrow
The modulo tomorrow command let's you journal your thoughts as they come to you. 
These entries will be available via the `modulo today` command after 08:30 AM tomorrow (your wakeup time).

(entries.count > 0 && You've created 2 entries today so far.)

Compose your entry below. Then type the entry_delimiter (%) to save your entry and start the next.
Type `done` to abort

Entry 1:
Lorem ipsem dolor %

modulo peek
if (entries.count > 0) {
    You've created 2 entries today so far.
    1.
    I learned alot more that expected tod...

    Run `modulo tomorrow` to add new entries 
    Run `modulo remove` to remove an entry
} else {
    You haven't submitted any entries today
    Run `modulo tomorrow` to create your first entry.
}

modulo remove 2
You are attempting to remove

2. Lorum ipsem dolor ivan getenth ber.. 

Type "yes" to permanently remove this entry. 
Anything else will abort the removal.

Remove this entry? (type "yes"): yes

if (yes) {
    Successfully removed entry 2!
} else if (anything else typed) {
    Aborting due to response {response}
}