TODO:
    - arg parsing 
        - using argc and argv
    - prompt loop
        - simple while loop
    - stdin i/o
        - how do c programs handle input output streams
        - how does the terminal process facilitate this? (it must right)
    - filesys persistence  
        - what syscalls do c programs use to write to disk (file descriptors?)
        - where should program data be stored?
            - linux: .config
            - macOS, Windows: TBD
        - (de)serialize struct data structure on reads and writes (today and tomorrow)
            - cJson 
        - Something like:
            typedef struct {
                char *name;
                uint16_t wakeup;
                char * today[100];
                char *[] tomorrow;
                uint32_t last_update
            } ProgramData;
    - system time (clock)

On wakeup with unread entries:
    "You have unread entries..."

----------------------------------------------
Welcome! Modulo is a productivity app built to bridge the 
gap between todays thoughts and tomorrows actions!

It's like a personal messaging system for sending
thoughts to the future and reading thoughts from the past.

Here's how it works. 

Modulo maintains two "entry lists"
    1. today
    2. tomorrow

The today list contains entries written yesterday to be read today
the tomorrow list contains entries written today to be read tomorrow

As an example, you might run the command 

`modulo tomorrow` 

to add some to-do items you want to do tomorrow

Then tomorrow, you can run

`modulo wakeup` 
`modulo today`

to review the to-do entries. 

The `modulo wakeup` command tells modulo that you're ready to begin a new day. 
This is required when you start a new day at a time between wakeup_earliest and wakeup_latest 
(preferences which we will configure).

However Modulo will automatically begin a new day after wakeup_latest.
This means you can set wakeup_earliest = wakeup_latest to avoid
typing modulo_wakeup if you prefer!

Let's configure your wakeup range. 
You can type 12-hour times like 9am, 9:30am or 24-hour times like 14:30

Enter the earliest time you plan to wake up. 

wakeup_earliest: 

Now set the latest time you pland to wake up.

wakeup_latest: 


----------------------------------------------

modulo set
----------
modulo set username
Successfully updated username!
Previous username: phyde, New username: 

modulo set wakeup_earliest 5:00
Successfully updated wakeup_earliest preference!
Previous wakeup_earliest: 07:00 AM, New wakeup_earliest: 08:15 AM

modulo set wakeup_latest 12pm
Successfully updated wakeup_latest preference!
Previous wakeup_latest: 09:00 AM, New wakeup_latest: 12:00 PM

modulo set entry_delimiter jj
Successfully updated entry delimiter!
Previous deilimiter: %, New delimiter: jj

modulo set preferences (sets username and wakeup)
This utility helps you update your user preferences.
type `done` at any time to abort

The following preferences are set:
    1. username: early_riser
    2. wakeup_earliest: 05:00 AM
    3. wakeup_latest: 12:00 PM
    4. entry_delimiter: %

Enter a number to set a preference: 1

Current username: early_riser
Enter a new username (or submit an empty string to select a different preference).

new username: night_owl

Successfully updated username to night_owl!

The following preferences are set:
    1. username: night_owl
    2. wakeup: 07:00 AM
    3. entry_delimiter: %

Enter a number to set a preference: 2

Current wakeup: 10am
Enter a new wakeup time (or submit an empty string to select a different preference).

new wakeup: 10am

Successfully updated wakeup to 09:00 AM!

Errors:
username [
    Oops, the username "night_owlllllll..." is too long! Usernames must be 31 characters or less. 
]

wakeup [
    Error parsing wakeup time: 730am
    Your input must match one of the following formats:
    AM/PM:
        1. %H(am|pm)
        2. %H:%M(am|pm)
    24-Hour:
        3. %H
        4. %H:%M
    
    Note that white space and leading zeros are optional. Also matching is case insensitive.
    i.e. "9am", "009:00 AM", "9:00am", and "9 : 00" are all valid.
]

entry_delimiter [
    Oops, entry_delimiter is too long. The delimiter must be 15 characters or less
]


modulo get
----------
modulo get username
current username: night_owl

modulo get wakeup
Current wakeup: 10am

modulo get entry_delimiter
Current entry_delimiter: %

modulo get preferences (gets username and wakeup)
The following preferences are set:
    1. username: night_owl
    2. wakeup: 07:00 AM
    3. entry_delimiter: %

update preferences with `modulo set preferences`

Journaling
----------

modulo today

You have 3 new entries to review today [No entries to review today]
sent:     Yesterday 10:00 PM
received: now

1. 
Lorem ipsem dolor ivet lendonor pervat at te sentin fan batcha lin gemlin
olor ivet lendonor pervat at te sentin fan batcha lin gemlin
Lorem ipsem dolor ivet lendonor pervat at te sentin fan batcha lin gemlin

2. 
sdfgdsfg

3. 
olor ivet lendonor pervat at te sentin fan batcha lin gemlin
Lorem ipsem dolor ivet lendonor pervat at te sentin fan batcha lin gemlin
sdfgdsfg

The modulo tomorrow command let's you journal your thoughts as they come to you. 
These entries will be available via the `modulo today` command after 08:30 AM tomorrow (your wakeup time).




modulo tomorrow


Modulo Entry Editor

Type `%` and press enter to submit. 
Entry `%%` when you're done to save and exit.
_____________________________________________________________________________________________________________________________
Today: July 23, 2023
wakeup: Tomorrow 7:00 Am - 10:45PM
Total entries written: 2

Entries:
1. 11:30 AM
2. 12:40 PM
3. 



Entry 1:
Lorem ipsem dolor %

modulo peek
if (entries.count > 0) {
    You've created 2 entries today so far.
    1.
    I learned alot more that expected tod...

    Run `modulo tomorrow` to add new entries 
    Run `modulo remove` to remove an entry
} else {
    You haven't submitted any entries today
    Run `modulo tomorrow` to create your first entry.
}

modulo remove 2
You are attempting to remove

2. Lorum ipsem dolor ivan getenth ber.. 

Type "yes" to permanently remove this entry. 
Anything else will abort the removal.

Remove this entry? (type "yes"): yes

if (yes) {
    Successfully removed entry 2!
} else if (anything else typed) {
    Aborting due to response {response}
}

Welcome! Modulo is a productivity app built to bridge the gap between today's thoughts and tomorrow's actions!

It's like a personal messaging system that let's you send thoughts to tomorrow and read thoughts from yesterday. 

To get started Modulo will need some info to sync to your sleep schedule.  
This will help coordinate when to advance to the next day 
(and transfer messages from today's outbox to tomorrow's inbox) 

What is the earliest you plan to wake up?

wakeup earliest: 

What is the latest you plan to wakeup? 
(Modulo will automatically advance to the next day after this time)

wakeup latest:

The current time 8:45 AM is between your 
selected wakeup range. Can we assume you're 
up for a new day?

(yes or no): 

Awesome, you're all set up! Start sending messages
to tomorrow's inbox with the `modulo tomorrow command`

If you wake up before wakeup_latest, run the `modulo wakeup`
command. Then run `modulo today` to see the messages!

Alternatively, you can omit the `modulo wakeup` command if you
wake up after {wakeup latest}.

most recent wakeup: 

Here's how it works. 

Modulo maintains two "entry lists"
    1. today
    2. tomorrow

The today list contains entries written yesterday to be read today
the tomorrow list contains entries written today to be read tomorrow

As an example, you might run the command 

`modulo tomorrow` 

to add some to-do items you want to do tomorrow

Then tomorrow, you can run

`modulo wakeup` 
`modulo today`

to review the to-do entries. 

The `modulo wakeup` command tells modulo that you're ready to begin a new day. 
This is required when you start a new day at a time between wakeup_earliest and wakeup_latest 
(preferences which we will configure).

However Modulo will automatically begin a new day after wakeup_latest.
This means you can set wakeup_earliest = wakeup_latest to avoid
typing modulo_wakeup if you prefer!

Let's configure your wakeup range. 
You can type 12-hour times like 9am, 9:30am or 24-hour times like 14:30

Enter the earliest time you plan to wake up. 

wakeup_earliest: 

Now set the latest time you pland to wake up.

wakeup_latest: 




wakeup {
Good morning pahyde!
}

It's currently 8:45 AM (8:00) July 20, 2023.
Your next wakeup is scheduled for 7:00 AM - 10:00 AM tomorrow.

Entry List Status
-----------------
today    (inbox):  3 entries to review today
tomorrow (outbox): 0 entries written for tomorrow
history: 
    1. -
    2. -
    3. -

if (entries.size > 0) {
You have 3 new entries to review today!
Run `modulo today` to view them or run `modulo tomorrow` to start journaling your thoughts for tomorrow. 
} else {
No entries to review today (You have to start somewhere!).
Run `modulo tomorrow` to start journaling your thoughts for tomorrow's inbox.
}


Your earliest wakeup time is approaching!

It's currently 10:45 PM July 20, 2023.
Your next wakeup is scheduled between 7:00 AM - 10:00 AM tomorrow.

 ___   /\        
|\__\ / /\       
\|__|/ / /       
    / / /___     
   / / /|\__\    
  |\/ / \|__|    
   \|/         